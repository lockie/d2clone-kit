#+STARTUP: showall indent hidestars

* Run

Запускаем slime из ./src
В репле:

#+BEGIN_SRC lisp
  (ql:quickload "d2clone-kit")
  (d2clone-kit:demo)
#+END_SRC

* Entry point

Точка входа просто запускает ~start-engine~

#+BEGIN_SRC lisp
  (defun demo ()
    "Runs built-in engine demo."
    (start-engine
     "demo"
     '(((:camera)
        (:coordinate :x 0d0 :y 0d0))
       ((:player)
        (:coordinate :x 0d0 :y 0d0)
        (:sprite :prefab :heroine :layers-initially-toggled (:head :clothes))
        (:character)
        (:hp :current 100d0 :maximum 100d0)
        (:mana :current 100d0 :maximum 100d0)
        (:combat :min-damage 1d0 :max-damage 2d0))
       ((:mob :name "Spiderant")
        (:coordinate :x 2d0 :y 2d0)
        (:sprite :prefab :spiderant :layers-initially-toggled (:body))
        (:character :speed 1d0)
        (:hp :current 15d0 :maximum 15d0)
        (:combat :min-damage 1d0 :max-damage 10d0))
       ;; ((:mob :name "Spiderant")
       ;;  (:coordinate :x 4d0 :y 4d0)
       ;;  (:sprite :prefab :spiderant :layers-initially-toggled (:body))
       ;;  (:character :speed 1d0)
       ;;  (:hp :current 50d0 :maximum 50d0))
       ;; ((:mob :name "Spiderant")
       ;;  (:coordinate :x 3d0 :y 3d0)
       ;;  (:sprite :prefab :spiderant :layers-initially-toggled (:body))
       ;;  (:character :speed 1d0)
       ;;  (:hp :current 50d0 :maximum 50d0))
       ((:coordinate :x 0d0 :y 0d0)
        (:map :prefab :map)))
     nil))
#+END_SRC

* Start engine

Эта функция запускает FFI-функцию, маскируя эксепшены, которые могут
произойти при вычислениях с плавающей запятой.

*new-game-object-specs* - это описание сцена на мини-DSL.

Сорцы liballegro можно найти в http://github.com/liballeg/allegro5 а доку
на сайте https://liballeg.org

В liballegro передаются обернутый коллбэк лисповой функции run-engine,
которая находится в этом же файле.

#+BEGIN_SRC lisp
  (defunl start-engine (game-name new-game-object-specs table-indices
                                  &rest config)
    "Initializes and starts engine to run the game named by GAME-NAME.
  NEW-GAME-OBJECT-SPECS is list of game object specifications to be created when
   the new game is started with MAKE-OBJECT. TABLE-INDICES, if non-nil,
   specifies the columns in indices to build from a data tables read from .cdb
   file with BUILD-DATA-TABLES. CONFIG plist is used to override variables read
   from config file.

  See MAKE-OBJECT
  See BUILD-DATA-TABLES"
    (let ((*game-name* game-name)
          (*sanitized-game-name* (sanitize-filename game-name))
          (*new-game-object-specs* new-game-object-specs)
          (*config-options* config)
          (*table-indices* table-indices))
      (float-features:with-float-traps-masked
          (:divide-by-zero :invalid :inexact :overflow :underflow)
        (al:run-main 0 (cffi:null-pointer) (cffi:callback run-engine)))))
#+END_SRC

* Run engine

with-condition-reporter выводит GUI-окошко для сообщения об ошибке, если
мы не находимся под отладчиком.

uiop:xdg-data-home - это путь к ~/.local/share/...

init-if и init-config инициализируют все необходимое для старта игры,
монтируют зип файлы как пути и т п

#+BEGIN_SRC lisp
  (cffi:defcallback run-engine :int ((argc :int) (argv :pointer))
  (declare (ignore argc argv))
  (with-condition-reporter
    (let ((data-dir
            (merge-pathnames
             (make-pathname :directory `(:relative ,*sanitized-game-name*))
             (uiop:xdg-data-home))))
      (ensure-directories-exist data-dir)
      (init-log data-dir)
      (log-info "Starting d2clone-kit engine v~a" +engine-version+)
      (al:set-app-name *sanitized-game-name*)
      (al:init)
      (init-fs *sanitized-game-name* data-dir)
      (init-config))

    ;; TODO : proper recover from those errors
    (unless (al:init-primitives-addon)
      (error "Initializing primitives addon failed"))
    (unless (al:init-image-addon)
      (error "Initializing image addon failed"))
    (al:init-font-addon)
    (unless (al:init-ttf-addon)
      (error "Initializing TTF addon failed"))
    (unless (al:install-audio)
      (error "Intializing audio addon failed"))
    (unless (al:init-acodec-addon)
      (error "Initializing audio codec addon failed"))
    (unless (al:restore-default-mixer)
      (error "Initializing default audio mixer failed"))

    ;; Добавление опций
    (doplist (key val *config-options*)
      (apply #'(setf config) val
             (mapcar #'make-keyword
                     (uiop:split-string (string key) :separator '(#\-)))))

    (with-system-config-options
        ((display-windowed display-multisampling display-width display-height))
      (al:set-new-display-flags
       ;; TODO : fix fullscreen
       (if display-windowed
           '(:windowed)
           '(:fullscreen-window :frameless)))
      (unless (zerop display-multisampling)
        (al:set-new-display-option :sample-buffers 1 :require)
        (al:set-new-display-option :samples display-multisampling :require))

      (let ((display (al:create-display display-width display-height))
            (event-queue (al:create-event-queue)))
        (when (cffi:null-pointer-p display)
          (error "Initializing display failed"))
        (al:inhibit-screensaver t)
        (al:set-window-title display *game-name*)
        (al:register-event-source event-queue
                                  (al:get-display-event-source display))
        (al:install-keyboard)
        (al:register-event-source event-queue (al:get-keyboard-event-source))
        (al:install-mouse)
        (al:register-event-source event-queue (al:get-mouse-event-source))
        (setf *event-source* (cffi:foreign-alloc '(:struct al::event-source)))
        (al:init-user-event-source *event-source*)
        (al:register-event-source event-queue *event-source*)

        (al:set-new-bitmap-flags '(:video-bitmap))

        (setf *random-state* (make-random-state t))

        (setf *data-tables*
              (build-data-tables
               (load-castledb-tables
                (make-instance 'character-stream
                               :path (format nil "tables/~a.cdb"
                                             ,*sanitized-game-name*)))
               ,*table-indices*))

        (unwind-protect
             (progn
               (initialize-systems)
               (game-loop event-queue))
          (log-info "Shutting engine down")
          (when (entity-valid-p *session-entity*)
            (delete-entity *session-entity*))
          (setf *session-entity* +invalid-entity+)
          (finalize-systems)
          (finalize-entities)
          (finalize-actions)
          (growable-vector-clear *event-queue*)
          (al:inhibit-screensaver nil)
          (al:destroy-user-event-source *event-source*)
          (cffi:foreign-free *event-source*)
          (setf *event-source* (cffi:null-pointer))
          (al:destroy-event-queue event-queue)
          (al:destroy-display display)
          (al:stop-samples)
          (close-config)
          (al:uninstall-system)
          (al:uninstall-audio)
          (al:shutdown-ttf-addon)
          (al:shutdown-font-addon)
          (al:shutdown-image-addon)
          (al:shutdown-primitives-addon)
          (close-fs)))))
  0)
#+END_SRC

* Game loop

#+BEGIN_SRC lisp
  (defunl game-loop (event-queue &key (repl-update-interval 0.3))
    "Runs game loop."
    (gc :full t)
    (log-info "Starting game loop")
    (livesupport:setup-lisp-repl)
    (with-system-config-options ((display-vsync display-fps))
      (let* ((vsync display-vsync)
             (renderer (make-renderer))
             (last-tick (al:get-time))
             (last-repl-update last-tick))
        (cffi:with-foreign-object (event '(:union al:event))
          (sleep 0.016)
          ;; TODO : restart to continue loop from the next iteration
          (loop :do
            (nk:with-input (ui-context)
              (unless (loop :while (al:get-next-event event-queue event)
                            :always (or (ui-handle-event event)
                                        (systems-handle-event event)))
                (loop-finish)))
            (process-events)
            (let ((current-tick (al:get-time)))
              (when (> (- current-tick last-repl-update) repl-update-interval)
                (livesupport:update-repl-link)
                (setf last-repl-update current-tick))
              (when display-fps
                ;; TODO : smooth FPS counter, like in allegro examples
                (add-debug-text :fps "FPS: ~d"
                                (round 1 (- current-tick last-tick))))
              (setf *delta-time* (- current-tick last-tick))
              (process-actions)
              (with-systems sys
                ;; TODO : replace system-update with event?.. maybe even
                ;; system-draw too?..
                (system-update sys))
              (with-systems sys
                (system-draw sys renderer))
              (al:clear-to-color (al:map-rgb 0 0 0))
              (do-draw renderer)
              (setf last-tick current-tick))
            (when vsync
              (setf vsync (al:wait-for-vsync)))
            (nk:allegro-render)
            (al:flip-display))))))
#+END_SRC

* Logging

Мы логгируем все функции, оборачивая их в ~defunl~, при этом они кладутся
в ~*function-name*~.

#+BEGIN_SRC lisp :tangle! log.lisp
  (defvar *function-name* "")

  (defmacro defunl (fname lambda-list &body body)
    "DEFUN wrapper which sets correct current function name for logging
  functions."
    (let ((docstring (when (stringp (car body)) (pop body))))
      `(defun ,fname ,lambda-list
         ,@(ensure-list docstring)
         (let ((*function-name* (quote ,fname)))
           ,@body))))
#+END_SRC

Другие функции, которые надо [TODO:gmm] добавить сюда из файла log.txt
используют ~*function-name*~. Таким образом в логи можно помещать ту
функцию которая исполняется в момент выполнения логгирования.

Логгирование происходит в ~/.local/share/demo/log.txt. По идее это нужно
сделать настраиваемым?
